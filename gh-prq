#!/usr/bin/env bash
# Usage: gh prq [OPTIONS]
#
# NAME
#   gh prq -- Create GitHub PRs with your $EDITOR
#
# SYNOPSIS
#   gh prq [OPTIONS]
#
# DESCRIPTION
#   Create GitHub Pull Requests with your $EDITOR.
#
#   This gh extension is meant to replace the functionality that `hub
#   pull-request` provided using `gh pr create` instead.
#
#   If a Pull Request template is found in .github/pull_request_template.md it
#   will be added when your $EDITOR is opened.
#
#   When you save and exit from your $EDITOR, the content written is sent as
#   the Pull Request, with the first line as the Title and the remaining lines
#   as the Body.
#
#   If the Pull Request is created successfully, the URL is printed to STDOUT.
#   Otherwise, errors are printed to STDERR.
#
# OPTIONS
#   -P, --push
#     Push the branch upstream first.
#
#   -C, --copy
#     Copy PR URL to clipboard.
#
#   -O, --open
#     Open the URL in your web browser.
#
# REPORTING BUGS
#   Issues can be reported on GitHub:
#
#   https://github.com/itspriddle/gh-prq/issues
#
# LICENSE
#   MIT License
#
# SEE ALSO
#   gh(1)

# Enable debug mode
if [[ "$DEBUG_GH_PRQ" ]]; then
  export PS4='+ [${BASH_SOURCE##*/}:$LINENO] '
  set -x
fi

set -euo pipefail

# gh-prq version
VERSION="0.2.0"

# Path to the file used as a Pull Request message template
PR_TEMPLATE_FILE=".github/pull_request_template.md"

# Prints the given message to STDERR
#
# $1 - Message
warn() {
  echo "${1:-}" >&2
}

# Prints the given message to STDERR and exits non zero.
#
# $1 - Message
abort() {
  warn "$(program_name): $1"
  exit 1
}

# Pretty prints the current program name, eg: "gh prq"
program_name() {
  printf "%s\\n" "${0//*\/gh-/gh }"
}

# Opens the URL in a web browser
#
# $1 - URL to open
open_url() {
  local url="$1"

  case "$(uname)" in
    Darwin)
      open "$url"
      ;;
    Linux)
      xdg-open "$url"
      ;;
    *)
      abort "Don't know how to open URLs on $(uname)"
      ;;
  esac
}

# Copies the given URL to the clipboard.
#
# $1 - URL to copy
copy_url() {
  local url="$1"

  case "$(uname)" in
    Darwin)
      echo "$url" | pbcopy
      ;;
    Linux)
      echo "$url" | xclip -selection clipboard
      ;;
    *)
      abort "Don't know how to copy URLs on $(uname)"
      ;;
  esac
}

# Strips blank lines from the start or end of the given text.
strip_lines() {
  awk '
    /[[:graph:]]/{ p = 1; for (i = 1; i <= n; i++) print ""; n = 0; print }
    p && /^[[:space:]]*$/ { n++ }
  '
}

# Creates a pull request via `gh pr create`.
#
# $@ - arguments are passed directly to `gh pr create`
create_pull_request() {
  local template
  local args=(--editor --fill-first)

  args+=(-H "$(git rev-parse --abbrev-ref HEAD)")

  template="$(git rev-parse --show-toplevel)/$PR_TEMPLATE_FILE"

  if [[ -f "$template" ]]; then
    args+=(--body "$(echo; strip_lines < "$template")")
  fi

  gh pr create "${args[@]}" "$@"
}

# Prints help text from the top of this file.
#
# $1 - `-h`, or `--help`. If `-h` is passed, only short `Usage:` info is
# printed.
print_help() {
  sed -ne '/^#/!q;s/^#$/# /;/^# /s/^# //p' < "$0" |
    awk -v f="${1#-h}" '!f&&/^Usage:/||u{u=!/^\s*$/;if(!u)exit}u||f'
}

# Main program
main() {
  local head=HEAD template url copy open push

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -P|--push)
        push=1
        shift
        ;;
      -C|--copy)
        copy=1
        shift
        ;;
      -O|--open)
        open=1
        shift
        ;;
      -V|--version|version)
        echo "$(program_name) v$VERSION"
        echo "https://github.com/itspriddle/gh-prq"
        return 0
        ;;
      -h|--help|help)
        print_help "$1"
        return 0
        ;;
      --)
        shift
        break
        ;;
      *)
        break
        ;;
    esac
  done

  # Ensure this is a GitHub repo.
  if [[ "$(git ls-remote --get-url 2> /dev/null)" != *"github"* ]]; then
    warn "Error: Remote \`origin' is not on GitHub, or is not setup."
    return 1
  fi

  local branch
  branch=$(git symbolic-ref --short "$head")

  if [[ "$branch" =~ ^(master|main)$ ]]; then
    warn "Error: You are on \`$branch', checkout a new branch first!"
    return 1
  fi

  if [[ "$push" ]]; then
    git push -u origin "$branch" #| grep -v -e '^remote: '
  fi

  if create_pull_request "$@" 2> /dev/null; then
    url="$(gh pr view --json url --jq .url)"

    [[ "$open" ]] && open_url "$url"
    [[ "$copy" ]] && copy_url "$url"
  else
    warn "Failed to create Pull Request!"
    return 1
  fi
}

main "$@"
